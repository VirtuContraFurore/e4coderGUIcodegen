[comment encoding = UTF-8 /]
[module generate('http://www.sssuprojects.it/e4codergui')]


[template public generateGUI(root : DocumentRoot)]
[comment @main/]
[root.code()/]
[/template]

[**
 * File which contains code 
 */]
[template private code(root : DocumentRoot)]
[file ('my_gui.c', false, 'UTF-8')]
[root.includes()/]

[for (frame : FrameType | root.gui.frame)]
[frame.frameInit()/]
[/for]

[/file]
[/template]

[template private includes(root : DocumentRoot)]
#include <stdlib.h>

#include "windowmanager/core/windowmanager.h"
#include "windowmanager/graphics/color.h"
[/template]

[template private frameInit(frame : FrameType)]
void struct Window * createWindow_[frame.name.cname()/](){
	struct Window window;
	struct Widget widgets['['+frame.element->size()+']'/];
[for (widget : Widget | frame.element) before('\n') separator('\n') after('\n') ]
	[widget.createWidget(frame.element->lastIndexOf(widget)-1)/]
[/for]
	window.widgets = widgets;
	window.n_widgets = [frame.element->size()/];
	window.background = WHITE;
	return &window;
}
[/template]

[template private createWidget(widget : Widget, index : Integer) post(trim()) ]
[widget.widget_struct()/]
widgets['['+index+']'/].visible = true;
widgets['['+index+']'/].funcs = [widget.widget_funcs()/];
widgets['['+index+']'/].data = [widget.name.cname()/];
[/template]

[template private widget_funcs(widget : Widget) post(trim()) ]
[if (widget.type = 'button-image')]
&button_WidgetFunctions
[else]
&dummy_WidgetFunctions
[/if]
[/template]

[template private widget_struct(widget : Widget) post(trim()) ]
[if (widget.type = 'button-image')]
struct button_Widget [widget.name.cname()/];
[else]
struct dummy_Widget [widget.name.cname()/];
[/if]
[/template]



[query public cname(name : String) : String = name.replaceAll('\\W', '_') /]