[comment encoding = UTF-8 /]
[module images('http://www.sssuprojects.it/e4codergui')]

[import it::sssuprojects::e4codergui::codegen::files::common /]

[template public generateImageCode(root : DocumentRoot)]
[root.imageHeader()/]
[root.imageSource()/]
[/template]

[template private imageHeader(root : DocumentRoot)]
[file ('my_images.h', false, 'UTF-8')]
/*
 * my_images.h
 * Auto generated header file for bitmap data
 */

[for (widget : Widget | root.gui.frame.element->select(w:Widget|w.imageDecl().size() > 0))]
/* Image data declaration for widget "[widget.name/]" in frame "[widget.eContainer(FrameType).name/]" */
[widget.imageDecl()/]
[/for]
[/file]
[/template]


[template private imageSource(root : DocumentRoot)]
[file ('my_images.c', false, 'UTF-8')]
/*
 * my_images.c
 * Auto generated source file for bitmap data
 */

[for (widget : Widget | root.gui.frame.element->select(w:Widget|w.imageDef().size() > 0))]
/* Image data definition for widget "[widget.name/]" in frame "[widget.eContainer(FrameType).name/]" */
[widget.imageDef()/]
[/for]
[/file]
[/template]

[template private imageDecl(widget : Widget) post(trim()) ]
[if (widget.type = 'button-image')]
#define [widget.image_width('pressed')/] [widget.pressedImagePath.img_width()/]
#define [widget.image_height('pressed')/] [widget.pressedImagePath.img_height()/]
extern const unsigned short [widget.image_bitmap('pressed')/]['[]'/];
#define [widget.image_width('released')/] [widget.pressedImagePath.img_width()/]
#define [widget.image_height('released')/] [widget.pressedImagePath.img_height()/]
extern const unsigned short [widget.image_bitmap('released')/]['[]'/];
[elseif (widget.type = 'buttonled')]
#define [widget.image_width('pressed_on')/] [widget.activePressedImagePath.img_width()/]
#define [widget.image_height('pressed_on')/] [widget.activePressedImagePath.img_height()/]
extern const unsigned short [widget.image_bitmap('pressed_on')/]['[]'/];
#define [widget.image_width('released_on')/] [widget.activeReleasedImagePath.img_width()/]
#define [widget.image_height('released_on')/] [widget.activeReleasedImagePath.img_height()/]
extern const unsigned short [widget.image_bitmap('released_on')/]['[]'/];
#define [widget.image_width('pressed_off')/] [widget.inactivePressedImagePath.img_width()/]
#define [widget.image_height('pressed_off')/] [widget.inactivePressedImagePath.img_height()/]
extern const unsigned short [widget.image_bitmap('pressed_off')/]['[]'/];
#define [widget.image_width('released_off')/] [widget.inactiveReleasedImagePath.img_width()/]
#define [widget.image_height('released_off')/] [widget.inactiveReleasedImagePath.img_height()/]
extern const unsigned short [widget.image_bitmap('released_off')/]['[]'/];
[elseif (widget.type = 'xx1')]
	xx	
[elseif (widget.type = 'xx2')]
	xx	
[elseif (widget.type = 'xx3')]
	xx	
[else] [comment Default handling/]
[comment: No img for this widget type/]
[/if]
[/template]

[template private imageDef(widget : Widget) post(trim()) ]
[if (widget.type = 'button-image')]
const unsigned short [widget.image_bitmap('pressed')/][widget.pressedImagePath.img_bitmap()/];
const unsigned short [widget.image_bitmap('released')/][widget.releasedImagePath.img_bitmap()/];
[elseif (widget.type = 'buttonled')]
const unsigned short [widget.image_bitmap('pressed_on')/][widget.activePressedImagePath.img_bitmap()/];
const unsigned short [widget.image_bitmap('released_on')/][widget.activeReleasedImagePath.img_bitmap()/];
const unsigned short [widget.image_bitmap('pressed_off')/][widget.inactivePressedImagePath.img_bitmap()/];
const unsigned short [widget.image_bitmap('released_off')/][widget.inactiveReleasedImagePath.img_bitmap()/];
[elseif (widget.type = 'xx1')]
xx	
[elseif (widget.type = 'xx2')]
xx	
[elseif (widget.type = 'xx3')]
xx	
[else] [comment Default handling/]
[comment: No img for this widget type/]
[/if]
[/template]


[**
 * Queris used to retrieve data from images..
*/]
[query private img_bitmap(path : Path) : String = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getBitmap(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_alpha(path : Path) : String = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getAlpha(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_width(path : Path) : Integer = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getWidth(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_height(path : Path) : Integer = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getHeight(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]


