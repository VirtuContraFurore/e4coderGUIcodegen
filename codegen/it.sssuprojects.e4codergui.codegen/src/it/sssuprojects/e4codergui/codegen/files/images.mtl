[comment encoding = UTF-8 /]
[module images('http://www.sssuprojects.it/e4codergui')]

[import it::sssuprojects::e4codergui::codegen::files::common /]

[template public generateImageCode(root : DocumentRoot)]
[root.imageHeader()/]
[root.imageSource()/]
[/template]

[template private imageHeader(root : DocumentRoot)]
[file ('my_images.h', false, 'UTF-8')]
/*
 * my_images.h
 * Auto generated header file for bitmap data
 */

[for (widget : Widget | root.gui.frame.element)]
/* Image data declaration for widget "[widget.name/]" in frame "[widget.eContainer(FrameType).name/]" */
[widget.imageDecl()/]
[/for]
[/file]
[/template]


[template private imageSource(root : DocumentRoot)]
[file ('my_images.c', false, 'UTF-8')]
/*
 * my_images.c
 * Auto generated source file for bitmap data
 */

[for (widget : Widget | root.gui.frame.element)]
/* Image data definition for widget "[widget.name/]" in frame "[widget.eContainer(FrameType).name/]" */
[widget.imageDef()/]
[/for]
[/file]
[/template]

[template private imageDecl(widget : Widget) post(trim()) ]
[if (widget.type = 'button-image')]
[widget.pressedImagePath.imageBitmapDecl(widget, 'pressed')/]
[widget.releasedImagePath.imageBitmapDecl(widget, 'released')/]
[elseif (widget.type = 'buttonled')]
[widget.activePressedImagePath.imageBitmapDecl(widget, 'pressed_on')/]
[widget.activeReleasedImagePath.imageBitmapDecl(widget, 'released_on')/]
[widget.inactivePressedImagePath.imageBitmapDecl(widget, 'pressed_off')/]
[widget.inactiveReleasedImagePath.imageBitmapDecl(widget, 'released_off')/]
[elseif (widget.type = 'buttonknob')]
[widget.pressedImagePath.imageBitmapDecl(widget, 'pressed')/]
[widget.pressedImagePath.imageAlphaDecl(widget, 'pressed')/]
[elseif (widget.type = 'xx2')]
	xx	
[elseif (widget.type = 'xx3')]
	xx	
[else] [comment Default handling/]
[comment: No img for this widget type/]
[/if]
[/template]

[template private imageDef(widget : Widget) post(trim()) ]
[if (widget.type = 'button-image')]
[widget.pressedImagePath.imageBitmapDef(widget, 'pressed')/]
[widget.releasedImagePath.imageBitmapDef(widget, 'released')/]
[elseif (widget.type = 'buttonled')]
[widget.activePressedImagePath.imageBitmapDef(widget, 'pressed_on')/]
[widget.activeReleasedImagePath.imageBitmapDef(widget, 'released_on')/]
[widget.inactivePressedImagePath.imageBitmapDef(widget, 'pressed_off')/]
[widget.inactiveReleasedImagePath.imageBitmapDef(widget, 'released_off')/]
[elseif (widget.type = 'buttonknob')]
[widget.pressedImagePath.imageBitmapDef(widget, 'pressed')/]
[widget.pressedImagePath.imageAlphaDef(widget, 'pressed')/]
[elseif (widget.type = 'xx2')]
xx	
[elseif (widget.type = 'xx3')]
xx	
[else] [comment Default handling/]
[comment: No img for this widget type/]
[/if]
[/template]

[template private imageBitmapDecl(path : Path, widget : Widget, name : String) post(trim()) ]
#define [widget.image_width(name)/] [path.img_width()/]
#define [widget.image_height(name)/] [path.img_height()/]
extern const unsigned short [widget.image_bitmap(name)/]['[]'/];
[/template]

[template private imageBitmapDef(path : Path, widget : Widget, name : String) post(trim()) ]
const unsigned short [widget.image_bitmap(name)/][path.img_bitmap()/];
[/template]

[template private imageAlphaDecl(path : Path, widget : Widget, name : String) post(trim()) ]
extern const unsigned char [widget.image_alpha(name)/]['[]'/];
[/template]

[template private imageAlphaDef(path : Path, widget : Widget, name : String) post(trim()) ]
const unsigned char [widget.image_alpha(name)/][path.img_alpha()/];
[/template]

[**
 * Queris used to retrieve data from images..
*/]
[query private img_bitmap(path : Path) : String = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getBitmap(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_alpha(path : Path) : String = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getAlpha(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_width(path : Path) : Integer = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getWidth(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_height(path : Path) : Integer = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'getHeight(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]



[**
 * failed experiment to optimize images...
*/]

[query private img_bitmap_isDeclared(path : Path) : Boolean = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'isBitmapDeclared(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]
[query private img_alpha_isDeclared(path : Path) : Boolean = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'isAlphaDeclared(it.sssuprojects.e4codergui.Path)', Sequence{path}) /]

[query private register_img_bitmap(path : Path, name : String) : Boolean = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'registerBitmap(it.sssuprojects.e4codergui.Path, java.lang.String)', Sequence{path, name}) /]
[query private register_img_alpha(path : Path, name : String) : Boolean = invoke('it.sssuprojects.e4codergui.codegen.services.ImageConversion', 'registerAlpha(it.sssuprojects.e4codergui.Path, java.lang.String)', Sequence{path, name}) /]

