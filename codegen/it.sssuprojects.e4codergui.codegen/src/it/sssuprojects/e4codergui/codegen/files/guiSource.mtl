[comment encoding = UTF-8 /]
[module guiSource('http://www.sssuprojects.it/e4codergui')]

[import it::sssuprojects::e4codergui::codegen::files::includes /]
[import it::sssuprojects::e4codergui::codegen::files::common /]
[import it::sssuprojects::e4codergui::codegen::files::widgets /]

[**
 * Sorce File
 */]
[template public generateSourceCode(root : DocumentRoot)]
[file ('my_gui.c', false, 'UTF-8')]
/*
 * my_gui.c
 * This code is auto generated from an xml file.
 */

[root.generateSourceIncludes()/]

[for (frame : FrameType | root.gui.frame)]
/* Code for frame "[frame.name/]" */

[frame.frameInit()/]

/* end code for frame "[frame.name/]" */
[/for]
[/file]
[/template]

[template private frameInit(frame : FrameType)]
struct Window [frame.name.cname()/];
struct Widget [frame.name.cname()/]_widgets['['+frame.element->size()+']'/];
[for (widget : Widget | frame.element) separator('\n') after('\n') ]
struct [widget.widget_struct()/] [widget.pdata_name()/];[/for]

struct Window * createWindow_[frame.name.cname()/](){
	struct Window * window = &[frame.name.cname()/];   //window's struct alias 
	struct Widget * widgets = [frame.name.cname()/]_widgets;   //widgets' array alias
[for (widget : Widget | frame.element) before('\n') separator('\n') after('\n') ]
	[widget.createWidget(frame.element->lastIndexOf(widget)-1)/]
[/for]
    //setting window frame properties
	window->widgets = widgets;
	window->n_widgets = [frame.element->size()/];
	window->background = WHITE;
	return window;
}
[/template]

[template private createWidget(widget : Widget, index : Integer) post(trim()) ]
// Initialization of widget "[widget.name/]"
[widget.widget_init_pdata()/]
widgets['['+index+']'/].visible = true;
widgets['['+index+']'/].funcs = &[widget.widget_funcs()/];
widgets['['+index+']'/].data = (void*) &[widget.pdata_name()/];
[/template]

[template private widget_funcs(widget : Widget) post(trim()) ]
[widget.widget_libname()/]_WidgetFunctions
[/template]

[template private widget_struct(widget : Widget) post(trim()) ]
[widget.widget_libname()/]_Widget
[/template]

[**
 * Use to retrieve the widget name used in the C library source code from the widget object from the xml model
*/]
[template private widget_libname(widget : Widget) post (trim()) ]
[if (widget.type = 'button-image')]
buttonImage
[elseif (widget.type = 'buttonled')]
buttonLed
[elseif (widget.type = 'image')]
image
[elseif (widget.type = 'buttonknob')]
knob
[elseif (widget.type = 'xx3')]
xx	
[else] [comment Default handling/]
dummy
[/if]
[/template]

[**
 * Use to generate the private data of each widget
*/]
[template private widget_init_pdata(widget : Widget) post (trim()) ]
[if (widget.type = 'button-image')]
[widget.generateButtonImage_pdata()/]
[elseif (widget.type = 'buttonled')]
[widget.generateButtonLed_pdata()/]
[elseif (widget.type = 'image')]
[widget.generateImage_pdata()/]
[elseif (widget.type = 'buttonknob')]
[widget.generateButtonKnob_pdata()/]	
[elseif (widget.type = 'xx3')]
xx	
[else] [comment Default handling/]
dummy
[/if]
[/template]

